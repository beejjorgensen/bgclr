#!/usr/bin/env python3

"""
Concatenates a number of input files into a single output file, while
performing the following regex substitutions:

[[pagebreak]]
[[manbreak]]
[[book-pagebreak]]

[nobr[s]]   # Substitute spaces with `\ ` to mark as nonbreaking
            # Doesn't work inside code markdown, alas

[nh[x]] \hyphenation{x}   # no hyphen, no underscores allowed
[ix[x]] \index{x}         # index straight up
[ixtt[x]] \index{x@\texttt{x}}         # index tt

fl = footnote link
flx = footnote link to example https://beej.us/guide/bgnet/examples/file
flr = footnote link to redirect https://beej.us/guide/url/id

[fl[link|url]] [link](url)^[url]
[flw[link|url]] [link](https://en.wikipedia.org/wiki/url)^[https://en.wikipedia.org/wiki/url]
[flx[link|file]] [link](https://beej.us/guide/bgnet/examples/file)^[https://beej.us/guide/bgnet/examples/file]
[flr[link|id]] [link](https://beej.us/guide/url/id)^[https://beej.us/guide/url/id]
[flrfc[link|num]] [link](https://tools.ietf.org/html/rfcnum)^[https://tools.ietf.org/html/rfcnum]


[i[entry]]
[i[entry]flags]

flags for page number: i: italic, b: bold, <: open range >: close range
flags for replacement: T: typewriter, I: italic, B: bold, or a combination.

[is[Foobar==>see `foo`]]   Index see-also

Backticks can delimit typewriter text:

[i[`\n` newline]]

entry can have subentries: "entry-->subentry"

Also puts a blank line between files.

"""

import sys
import re
import preproc_config

def get_config(k, default=None):
    return getattr(preproc_config, k, default)

def usage_exit():
    print("usage: preproc [--book] [--manbreak rule|page]", file=sys.stdout)
    print("               infile [infile ... ] outputfile", file=sys.stdout)
    sys.exit(1)

def parse_cl():
    args = sys.argv[:]
    args.pop(0)

    options = { "book": False, "manbreak": None }
    infiles = []
    outfile = None

    while args != []:
        if args[0][0] == '-':
            if args[0] == '--book' or args[0] == '-b':
                options["book"] = True

            elif args[0] == '--manbreak':
                args.pop(0)
                if len(args) == 0:
                    usage_exit()

                if args[0] != "rule" and args[0] != "page":
                    usage_exit()

                options["manbreak"] = args[0]
            else:
                usage_exit()

        else:
            infiles.append(args[0])

        args.pop(0)

    if len(infiles) < 2:
        usage_exit()

    outfile = infiles.pop()
            
    return options, infiles, outfile

def add_config_options(options):

    wp_path = get_config("WIKIPEDIA_URL", "https://en.wikipedia.org/wiki/")
    man_path = get_config("MAN_URL", "https://man.archlinux.org/man/core/man-pages/")
    example_url = get_config("EXAMPLE_URL", None)
    exercise_url = get_config("EXERCISE_URL", None)

    manbreak = get_config("MANBREAK", "page")

    if options["manbreak"] is not None:
        manbreak = options["manbreak"]

    if manbreak == 'page':
        manbreak = r'\\newpage'
    elif manbreak == 'rule':
        manbreak = '***'

    options["manbreak"] = manbreak
    options["wp_path"] = wp_path
    options["man_path"] = man_path
    options["example_url"] = example_url
    options["exercise_url"] = exercise_url

def collapse_spaces(s):
    return " ".join(s.split())

def nobr_replace(mo):
    return re.sub(r'\s', r'\ ', mo.group(1))

def escape(s):
    s = re.sub(r'\\', r'{\\backslash}', s)
    s = re.sub(r'(\^)', r'\\^{}', s)
    s = re.sub(r'([&_#%])', r'\\\1', s)
    s = re.sub(r'([!@])', r'"\1', s)
    s = re.sub(r'\|', r'\\textbar{}', s)

    return s

def code_replace(s):
    """ Replace ` code delimiters """
    result = ""
    opener = True

    for c in s:
        if c == '`':
            if opener:
                result += '\\texttt{'
            else:
                result += '}'
            opener = not opener
        else:
            result += c

    if not opener:
        raise Exception("unmatched '`' in index entry: " + s)

    return result

def get_entry_repl(entry, flags=''):
    entry = escape(entry)

    if 'T' in flags or 'I' in flags or 'B' in flags or '`' in entry:
        repl = entry
    else:
        repl = ''

    entry = re.sub(r'`', '', entry)
    repl = code_replace(repl)

    if repl != '':
        if 'T' in flags:
            repl = '\\texttt{' + repl + '}'
        if 'I' in flags:
            repl = '\\textsl{' + repl + '}'
        if 'B' in flags:
            repl = '\\textbf{' + repl + '}'

        repl = '@' + repl

    return (entry, repl)

def is_replace(m):
    """Index [is[]] tag replacer."""

    entryfull = collapse_spaces(m.group('entry'))

    key, value = entryfull.split('==>')

    key = "".join(get_entry_repl(key))

    values = value.split()
    first_word = values[0]
    value = " ".join(values[1:])

    value = escape(value)
    value = code_replace(value)

    result = '\\index{' + key + '|' + first_word + ' {' + value + '}}'

    return result

def i_replace(m):

    #print(f">>>> {m.groups()}")


    """Index [i[]] tag replacer."""
    entryfull = collapse_spaces(m.group('entry'))
    flags = m.group('flags')

    flags = flags if flags is not None else ''

    entries = []

    for entry in entryfull.split('-->'):
        entries.append("".join(get_entry_repl(entry, flags)))

    result = '\\index{' + "!".join(entries)

    if flags != '':
        result += '|'

        if '<' in flags:
            result += '('
        if '>' in flags:
            result += ')'
        if 'b' in flags:
            result += 'textbf'
        if 'i' in flags:
            result += 'textit'

    result += '}'

    result = result.replace("==>", "|")  # for [is[

    return result

def cat_files(infiles):
    filedata = []

    for infile in infiles:
        fin = open(infile)
        filedata.append(fin.read())
        filedata.append("\n")  # Put a blank in there in case there's no trailing newline
        fin.close()

    filedata = '\n'.join(filedata)

    return filedata

def main():
    options, infiles, outfile = parse_cl()

    filedata = cat_files(infiles)

    add_config_options(options)

    filedata = re.sub(r'\t', "    ", filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[nobr\[(.+?)\]\]', nobr_replace, filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[\[pagebreak\]\]', r'\\newpage', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[\[book-pagebreak\]\]', r'\\newpage' if options["book"] else '', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[\[manbreak\]\]', options["manbreak"], filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[nh\[(.+?)\]\]', r'\\hyphenation{\1}', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[ix\[(.+?)\]\]', r'\\index{\1}', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[ixtt\[(.+?)\]\]', r'\\index{\1@\\texttt{\1}}', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[fl\[(.+?)\|(.+?)\]\]', r'[\1](\2)^[\2]', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[flw\[(.+?)\|(.+?)\]\]', r'[\1](' + options["wp_path"] + r'\2)^[' + options["wp_path"] + r'\2]', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[flm\[(.+?)\|(.+?)\]\]', r'[\1](' + options["man_path"] + r'\2)^[' + options["man_path"] + r'\2]', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[flx\[(.+?)\|(.+?)\]\]', r'[\1](' + options["example_url"] + r'\2)^[' + options["example_url"] + r'\2]', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[fls\[(.+?)\|(.+?)\]\]', r'[\1](' + options["exercise_url"] + r'\2)^[' + options["exercise_url"] + r'\2]', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[flsol\[(.+?)\]\]', r'([Solution.](' + options["exercise_url"] + r'\1)^[' + options["exercise_url"] + r'\1])', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[flr\[(.+?)\|(.+?)\]\]', r'[\1](https://beej.us/guide/url/\2)^[https://beej.us/guide/url/\2]', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[flrfc\[(.+?)\|(.+?)\]\]', r'[\1](https://tools.ietf.org/html/rfc\2)^[https://tools.ietf.org/html/rfc\2]', filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[i\[(?P<entry>.+?)\](?P<flags>.*?)\]', i_replace, filedata, flags=re.DOTALL)
    filedata = re.sub(r'\[is\[(?P<entry>.+?)\]\]', is_replace, filedata, flags=re.DOTALL)

    fout = open(outfile, "w")
    in_fence = False
    this_line_fence = False
    number_lines = False

    # Go through a line at a time indenting if we're in unnumbered fenced code
    for line in filedata.splitlines(True):
        if line.strip()[:3] == '```':
            number_lines = line.lower().find("numberlines") != -1
            this_line_fence = True
            in_fence = not in_fence
        else:
            this_line_fence = False

        #if in_fence and not this_line_fence and not number_lines:
        #    fout.write("    ")   # indent

        fout.write(line)

    fout.close()

if __name__ == "__main__":
    main()
